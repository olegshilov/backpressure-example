{"version":3,"sources":["App.tsx","serviceWorker.ts","saga.ts","epic.ts","index.tsx","reducer.ts"],"names":["App","epicCount","useSelector","state","epic","sagaCount","saga","dispatch","useDispatch","onClick","type","Boolean","window","location","hostname","match","requestPoint","i","requestPromise","Promise","resolve","setTimeout","undefined","shouldContinue","call","value","console","log","delay","put","payload","Error","takeLatest","a","iterator$","iterator","push","pushValue","next","done","complete","BehaviorSubject","asyncGenerator","epicMiddleware","createEpicMiddleware","sagaMiddleware","createSagaMiddleware","store","createStore","action","applyMiddleware","run","action$","pipe","ofType","switchMap","tap","map","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60da9802.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from './reducer';\n\nexport function App() {\n  const epicCount = useSelector<RootState, number>((state) => state.epic);\n  const sagaCount = useSelector<RootState, number>((state) => state.saga);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      epicCount: {epicCount}\n      <br />\n      <button onClick={() => dispatch({ type: 'TAKE_EPIC' })}>\n        Take new number\n      </button>\n      <hr />\n      sagaCount: {sagaCount}\n      <br />\n      <button onClick={() => dispatch({ type: 'TAKE_SAGA' })}>\n        Take new number\n      </button>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { put, call, takeLatest, delay } from 'redux-saga/effects';\n\nlet i = 0;\nfunction requestPromise() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      if (i <= 10) {\n        resolve(i);\n        i++;\n      } else {\n        resolve(undefined);\n      }\n    }, 1000);\n  });\n}\n\nfunction* requestPoint() {\n  let shouldContinue = true;\n\n  do {\n    try {\n      const value = yield call(requestPromise);\n      if (value === undefined) {\n        shouldContinue = false;\n      } else {\n        console.log('SAGA: INCOMING VALUE', value);\n        yield delay(1000); // Some hard calculations here\n        console.log('SAGA: DONE PROCESSING VALUE', value);\n        yield put({\n          type: 'PUT_SAGA',\n          payload: value,\n        });\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  } while (shouldContinue);\n  console.log('SAGA: DONE PROCESSING ALL VALUES');\n}\n\nexport function* saga() {\n  yield takeLatest('TAKE_SAGA', requestPoint);\n}\n","import { ofType } from 'redux-observable';\nimport { switchMap, map, tap, delay } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nexport class IteratorBehaviorSubject<T> extends BehaviorSubject<T | undefined> {\n  constructor(private iterator: any) {\n    super(undefined);\n\n    this.iterator = iterator;\n    this.push(undefined);\n  }\n\n  public push = async (pushValue: T | undefined): Promise<void> => {\n    const { done, value } = await this.iterator.next(pushValue);\n\n    if (done && value === undefined) {\n      this.complete();\n    } else {\n      this.next(await value);\n    }\n  };\n}\n\nasync function* asyncGenerator() {\n  for (let i = 0; i <= 10; i++) {\n    yield new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(i);\n      }, 1000);\n    });\n  }\n}\n\nconst iterator$ = new IteratorBehaviorSubject(asyncGenerator());\nconsole.log({ iterator$ });\n\nexport function epic(action$: any): any {\n  return action$.pipe(\n    ofType('TAKE_EPIC'),\n    switchMap(() => {\n      return iterator$.pipe(\n        tap((value) => console.log('EPIC: INCOMING VALUE', value)),\n        delay(1000), // Some hard calculations here\n        tap((value) => console.log('EPIC: DONE PROCESSING VALUE', value)),\n        tap({\n          next: iterator$.push,\n          complete: () => {\n            console.log('EPIC: DONE PROCESSING ALL VALUES');\n          },\n        })\n      );\n    }),\n    map((value) => ({ type: 'PUT_EPIC', payload: value }))\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { saga } from './saga';\nimport { epic } from './epic';\n\nconst epicMiddleware = createEpicMiddleware();\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducer,\n  applyMiddleware(epicMiddleware, sagaMiddleware)\n);\n\nepicMiddleware.run(epic);\nsagaMiddleware.run(saga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export interface RootState {\n  epic: number;\n  saga: number;\n}\n\nexport function reducer(state: RootState = { epic: 0, saga: 0 }, action: any) {\n  if (action.type === 'PUT_EPIC') {\n    return { ...state, epic: action.payload };\n  } else if (action.type === 'PUT_SAGA') {\n    return { ...state, saga: action.payload };\n  } else {\n    return state;\n  }\n}\n"],"sourceRoot":""}